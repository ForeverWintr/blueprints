# This mostly comes from examples here: https://github.com/marketplace/actions/install-poetry-action

name: Tests

on:
  push:
    branches: [ main ]
  pull_request:


# defaults:
#   run:
#     shell: bash


jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: psf/black@stable

  # https://github.com/marketplace/actions/latest-python-versions
  get-python-versions:
    runs-on: ubuntu-latest
    outputs:
      python-matrix: ${{ steps.get-python-versions-action.outputs.latest-python-versions }}
    steps:
    - uses: snok/latest-python-versions@v1.1.0
      id: get-python-versions-action
      with:
        min-version: 3.9
        include-prereleases: false

  test:
    needs: [lint, get-python-versions]
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        python-version: ${{ fromJson(needs.get-python-versions.outputs.python-matrix) }}
        os: ["ubuntu-latest", "macos-latest", "windows-latest"]

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.2.0
      with:
        python-version: ${{ matrix.python-version }}
        # cache: 'poetry' # Needs poetry lockfile.

    - name: Install poetry
      uses: snok/install-poetry@v1.3.1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        # installer-parallel: true # May have caused an issue on macos

    #----------------------------------------------
    #       load cached venv if cache exists
    #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v2
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

    #----------------------------------------------
    # install dependencies if cache does not exist
    #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root

    - name: Install library
      run: poetry install --no-interaction

    - name: Run tests
      run: poetry run pytest --cov=assembler --cov-report=xml


    #----------------------------------------------
    #             upload coverage stats
    # (requires CODECOV_TOKEN in repository secrets)
    #----------------------------------------------
    # - name: Upload coverage
    #   uses: codecov/codecov-action@v1
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }}  # Only required for private repositories
    #     file: ./coverage.xml
    #     fail_ci_if_error: true
